#pragma once

template<typename T, int size>
class NoiseGenerator {
public:
    NoiseGenerator() : distribution(0f, 1f) {
    }

    // deltaX + deltaY should be less than 1
    void nextGenerate(float deltaX, float deltaY) {
        float randomWeight = 1 - deltaX - deltaY;
        values[0] = deltaY * ran
        for (int i = 1; i < size; i++) {
            values[i] = values[i - 1] * deltaX + va
        }
    }


    /*
     *  std::random_device rd;  //Will be used to obtain a seed for the random number engine
    std::mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
    std::uniform_real_distribution<> dis(1.0, 2.0);
    for (int n = 0; n < 10; ++n) {
        // Use dis to transform the random unsigned int generated by gen into a
        // double in [1, 2). Each call to dis(gen) generates a n
     */
    inline T getValue(const size_t& x) {
        return values[x];
    }

private:
    std::uniform_real_distribution<T> distribution;
    std::array<T, size> values;
};